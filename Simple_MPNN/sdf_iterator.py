from periodictable import elements
import torch
import numpy as np

from molecule import Molecule


class SdfIterator:
    '''
    Iterator Object used on a single .sdf file. One .sff file can have many molecules.
    Split the file by the separator ($$$$), and for each molecule generated by this,
    extract the atoms, bonds and label of each.
    :param file_path: string, name of sdf data file_path
    Note: self.periodic_table =
        {'n': 0, 'H': 1, 'He': 2, 'Li': 3, 'Be': 4, 'B': 5, 'C': 6, 'N': 7, 'O': 8, 'F': 9,
        'Ne': 10, 'Na': 11, 'Mg': 12, 'Al': 13, 'Si': 14, 'P': 15, 'S': 16, 'Cl': 17, 'Ar': 18,
        'K': 19, 'Ca': 20, 'Sc': 21, 'Ti': 22, 'V': 23, 'Cr': 24, 'Mn': 25, 'Fe': 26, 'Co': 27,
        'Ni': 28, 'Cu': 29, 'Zn': 30, 'Ga': 31, 'Ge': 32, 'As': 33, 'Se': 34, 'Br': 35, 'Kr': 36,
        'Rb': 37, 'Sr': 38, 'Y': 39, 'Zr': 40, 'Nb': 41, 'Mo': 42, 'Tc': 43, 'Ru': 44, 'Rh': 45,
        'Pd': 46, 'Ag': 47, 'Cd': 48, 'In': 49, 'Sn': 50, 'Sb': 51, 'Te': 52, 'I': 53, 'Xe': 54,
        'Cs': 55, 'Ba': 56, 'La': 57, 'Ce': 58, 'Pr': 59, 'Nd': 60, 'Pm': 61, 'Sm': 62, 'Eu': 63,
        'Gd': 64, 'Tb': 65, 'Dy': 66, 'Ho': 67, 'Er': 68, 'Tm': 69, 'Yb': 70, 'Lu': 71, 'Hf': 72,
        'Ta': 73, 'W': 74, 'Re': 75, 'Os': 76, 'Ir': 77, 'Pt': 78, 'Au': 79, 'Hg': 80, 'Tl': 81,
        'Pb': 82, 'Bi': 83, 'Po': 84, 'At': 85, 'Rn': 86, 'Fr': 87, 'Ra': 88, 'Ac': 89, 'Th': 90,
        'Pa': 91, 'U': 92, 'Np': 93, 'Pu': 94, 'Am': 95, 'Cm': 96, 'Bk': 97, 'Cf': 98, 'Es': 99,
        'Fm': 100, 'Md': 101, 'No': 102, 'Lr': 103, 'Rf': 104, 'Db': 105, 'Sg': 106, 'Bh': 107,
        'Hs': 108, 'Mt': 109, 'Ds': 110, 'Rg': 111, 'Cn': 112, 'Nh': 113, 'Fl': 114, 'Mc': 115,
        'Lv': 116, 'Ts': 117, 'Og': 118}
    '''
    def __init__(self, file_path):
        lines_unstripped = open(file_path, 'r').readlines()
        self.file_lines = [line.strip() for line in lines_unstripped]
        self.line = 0  # Counter for where we are in the file
        self.periodic_table = {}  # Need atomic number as feature instead of symbol
        for element in elements:
            self.periodic_table[element.symbol] = element.number


    def read_one_molecule(self):
        '''
        Read a single molecule from the .sdf file
        Starting from the line we left off, (or 0 if beginning), read lines until we hit a $$$$.
        Remember what line number we started at, and where we end.
        pass a slice of the array with these bounds to be turned into a Molecule, and return.
        :return:
        '''
        molecule_line_start = self.line
        if self.line == len(self.file_lines):
            self.line = 0
            return None

        while self.file_lines[self.line] != '$$$$':
            self.line += 1
            if self.line == len(self.file_lines):
                self.line = 0
                return None

        self.line += 1
        molecule_lines = self.file_lines[molecule_line_start: self.line]
        mol = self.create_one_molecule(molecule_lines)
        return mol


    def create_one_molecule(self, lines):
        '''
        Creates a molecule object from its file lines.
        Split all the lines by whitespace so we can get the info we care about.
        for atoms, only get the symbol.
        for bonds, only get the first two elements (indices of atoms connected by bond).
        Only other thing we need is the label: 1 == active against cancer, -1 else.

        Note: lines after [l.split() for l in lines] has the format as below
              (For one molecule)
        [ ['571989'], [], [], ['44', '47', '0', '0', '0', '0', '1', 'V2000'],
          ['0.0000', '0.0000', '0.0000', 'Cl', '0', '0', '0', '0', '0', '0'],  # len=10 -> Atom
          ['0.0000', '0.0000', '0.0000', 'O', '0', '0', '0', '0', '0', '0'],   # len=10 -> Atom
          ...
          ['0.0000', '0.0000', '0.0000', 'C', '0', '0', '0', '0', '0', '0'],   # len=10 -> Atom
          ['1', '30', '1', '0', '0', '0'], # len=6 -> bond
          ['2', '13', '1', '0', '0', '0'],
          ...
          ['40', '43', '1', '0', '0', '0'],
          ['M', 'END'], ['>', '<value>'],
          ['1.0'],
          [],
          ['$$$$'],
          ...
        ]
        return: Data structure of molecule
            Eg. With the molecule of above examole
            print(mol.nodes) -> [17, 8, ..., 6, 6, 6, 6, 6]
            print(mol.edges) -> [(0, 29), (1, 12),..., (39, 42)]
            print(mol.label) -> 0
        '''
        lines = [l.split() for l in lines]
        atoms = [l for l in lines if len(l) == 10]
        bonds = [l for l in lines if len(l) == 6]
        nodes = [self.periodic_table[a[3]] for a in atoms]
        edges = [(int(b[0]) - 1, int(b[1]) - 1) for b in bonds]
        label = int(float(lines[-3][0]))
        if label == -1:
            label = 1
        else: # lable=1 -> set to 0
            label = 0
        label = np.array(label).astype(np.long)
        return Molecule(nodes, edges, label)


if __name__ == '__main__':
    mol = SdfIterator(file_path=r'data\one_molecule_example.sdf').read_one_molecule()
    print(mol.nodes)
    print(mol.edges)
    print(mol.label)